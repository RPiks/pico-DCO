.program dco
    set x, 0


.wrap_target
    pull ifempty    //                                              1
    out y, 32        // load 8-bit delay value in terms of cycles.   2
LOOP0:
    jmp y-- LOOP0   // do accurate delay.                           3+t
    set pins, 1     // set pins = 1.                                4+t.


    pull ifempty    //                                              5+t
    out y, 32        // load 8-bit delay value in terms of cycles.   6+t
LOOP1:
    jmp y-- LOOP1   //                                              7+t
    set pins, 0     //                                              8+t
                    // CLK/8 max, 250MHz/8 = 31.25 MHz output max frq.
                    // CLK/(255+8) min, 250MHz/263 = 950 kHz min frq.
                    // So, it covers 3..30 MHz HF band + 160 meter band.
//    pull ifempty
//    out y, 32
//LOOP2:
//    jmp y-- LOOP2
//    set pins, 1


//    pull ifempty
//    out y, 32
//LOOP3:
//    jmp y-- LOOP3
//    set pins, 0

.wrap

% c-sdk {
static inline void dco_program_init(PIO pio, uint sm, uint offset, uint pin)
{
    pio_sm_config c = dco_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin, 1);
    pio_gpio_init(pio, pin);

    sm_config_set_out_shift(&c, false, true, 32);           // Autopull.
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    
    sm_config_set_clkdiv(&c, 1.f);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
//
static inline void dco_program_puts(PIO pio, uint sm, const uint32_t *s)
{
    pio_sm_put_blocking(pio, sm, s[0]);
    pio_sm_put_blocking(pio, sm, s[1]);
    pio_sm_put_blocking(pio, sm, s[2]);
    pio_sm_put_blocking(pio, sm, s[3]);
    pio_sm_put_blocking(pio, sm, s[4]);
    pio_sm_put_blocking(pio, sm, s[5]);
    pio_sm_put_blocking(pio, sm, s[6]);
    pio_sm_put_blocking(pio, sm, s[7]);
}

%}
